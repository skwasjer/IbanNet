{% macro generated_code(generator, version) -%}
[GeneratedCode("{{ generator }}", "{{ version }}")]
{%- endmacro -%}
{% macro patternDescriptor(countryCode, name, descriptor, bbanOffset) -%}
{%- if descriptor.pattern %}
            {{ name }} = new PatternDescriptor(Patterns.{{ countryCode }}.{{ name }}
            {%- if bbanOffset -%}
            , {{ bbanOffset | plus: 4 }}
            {%- endif %})
            {%- if descriptor.example.size > 0 %}
            {
                Example = "{{ descriptor.example }}"
            }
            {%- endif %},
{%- endif %}
{%- endmacro -%}

// <auto-generated/>

#nullable enable

using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using IbanNet.Extensions;
using IbanNet.Registry.Patterns;

namespace {{ syntax.namespace }};

/// <remarks>
/// Nr. of countries: {{ countries.size }}
/// </remarks>
partial class {{ syntax.className }}
{
    /// <remarks>
    /// Generated from: {{ datasource }}<br />
    /// </remarks>
    {{ generated_code(generator.name, generator.version) }}
    private static partial IEnumerable<IbanCountry> {{ syntax.methodName }}()
    {
        // ReSharper disable CommentTypo
        // ReSharper disable StringLiteralTypo

        {%- if countries.size == 0 %}
        yield break; // Empty registry provider!!
        {% else %}
        {%- for row in countries -%}
        {%- assign bbanOffset = 4 %}

        // {{ row.englishName }}
        yield return new IbanCountry("{{ row.countryCode }}")
        {
            NativeName = "{{ row.nativeName }}",
            EnglishName = "{{ row.englishName }}",
            {%- if row.otherTerritories.size > 0 %}
            IncludedCountries = ["{{ row.otherTerritories | join: "\", \"" }}"],
            {%- endif %}
            {{- patternDescriptor(row.countryCode, "Iban", row.iban) }}
            {{- patternDescriptor(row.countryCode, "Bban", row.bban, 0) }}
            {{- patternDescriptor(row.countryCode, "Bank", row.bank, row.bank.position.startPos) }}
            {{- patternDescriptor(row.countryCode, "Branch", row.branch, row.branch.position.startPos) }}
            {%- if row.sepa %}
            Sepa = new SepaInfo
            {
                IsMember = {{ row.sepa.isMember }}
                {%- if row.sepa.otherTerritories.size > 0 -%}
                ,
                IncludedCountries = ["{{ row.sepa.otherTerritories | join: "\", \"" }}"]
                {%- endif %}
            },
            {%- endif %}
            {%- if row.domesticExample %}
            DomesticAccountNumberExample = "{{ row.domesticExample }}",
            {%- endif %}
            {%- if row.lastUpdatedDate %}
            LastUpdatedDate = new DateTimeOffset({{ row.lastUpdatedDate | date: "%Y" }}, {{ row.lastUpdatedDate | date: "%-m" }}, 1, 0, 0, 0, TimeSpan.Zero),
            {%- endif %}
            {%- if row.effectiveDate %}
            EffectiveDate = new DateTimeOffset({{ row.effectiveDate | date: "%Y" }}, {{ row.effectiveDate | date: "%-m" }}, 1, 0, 0, 0, TimeSpan.Zero)
            {%- endif %}
        };

        {%- endfor %}
        {%- endif %}

        // ReSharper restore StringLiteralTypo
        // ReSharper restore CommentTypo
    }

    {{ generated_code(generator.name, generator.version) }}
    private static class Patterns
    {
        {{ generated_code(generator.name, generator.version) }}
        internal class Pattern : IbanNet.Registry.Patterns.Pattern
        {
            public Pattern(string pattern, int maxLength, bool isFixedLength, PatternToken[] tokens)
                : base(pattern, maxLength, isFixedLength, tokens)
            {
            }
        }

        {%- for row in countries %}

        // {{ row.englishName }}
        {{ generated_code(generator.name, generator.version) }}
        internal static class {{ row.countryCode }}
        {
{% render "PatternClass", name: "Iban", pattern: row.iban.pattern, unrolled: true %}
{% render "PatternClass", name: "Bban", pattern: row.bban.pattern %}
{% render "PatternClass", name: "Bank", pattern: row.bank.pattern %}
{% render "PatternClass", name: "Branch", pattern: row.branch.pattern %}
        }

        {%- endfor %}
    }
}
