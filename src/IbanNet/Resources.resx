<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
	
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
    <data name="IbanFormatException_The_value_0_is_not_a_valid_IBAN" xml:space="preserve">
        <value>The value '{0}' is not a valid IBAN.</value>
    </data>
    <data name="ArgumentException_The_format_is_required_with_supported_formats" xml:space="preserve">
        <value>The format is required. Supported formats are '{0}' (flat) and '{1}' (partitioned by space).</value>
    </data>
    <data name="ArgumentException_The_format_0_is_invalid_with_supported_formats" xml:space="preserve">
        <value>The format '{0}' is invalid. Supported formats are '{1}' (flat) and '{2}' (partitioned by space).</value>
    </data>
    <data name="ArgumentException_The_format_0_is_invalid" xml:space="preserve">
        <value>The format '{0}' is invalid.</value>
    </data>
    <data name="ArgumentException_Registry_is_required" xml:space="preserve">
        <value>Provide the registry.</value>
    </data>
    <data name="ArgumentException_Invalid_country_code" xml:space="preserve">
        <value>Invalid country code. must be exactly two characters long.</value>
    </data>
    <data name="IllegalCharactersResult" xml:space="preserve">
        <value>The IBAN contains illegal characters.</value>
    </data>
    <data name="InvalidCheckDigitsResult" xml:space="preserve">
        <value>The IBAN check digits are incorrect.</value>
    </data>
    <data name="InvalidLengthResult" xml:space="preserve">
        <value>The IBAN has an incorrect length.</value>
    </data>
    <data name="InvalidStructureResult" xml:space="preserve">
        <value>The structure of the IBAN is incorrect.</value>
    </data>
    <data name="UnknownCountryCodeResult" xml:space="preserve">
        <value>The country code is unknown/not supported.</value>
    </data>
    <data name="IllegalCountryCodeCharactersResult" xml:space="preserve">
        <value>The IBAN contains illegal characters in the position where the country code is expected.</value>
    </data>
    <data name="ArgumentException_The_structure_segment_0_is_invalid" xml:space="preserve">
        <value>The pattern segment '{0}' is invalid at position {1}.</value>
    </data>
    <data name="InvalidTokenException_Expected_alphanumeric_character_at_position_0_but_found_1" xml:space="preserve">
        <value>Expected alphanumeric character at position {0}, but found '{1}'.</value>
    </data>
    <data name="PartitionOn_At_least_one_character_to_partition_on_is_required" xml:space="preserve">
        <value>At least one character to partition on is required.</value>
    </data>
    <data name="The_registry_has_no_providers" xml:space="preserve">
        <value>The registry has no providers.</value>
    </data>
    <data name="One_or_more_providers_is_required" xml:space="preserve">
        <value>One or more providers is required.</value>
    </data>
    <data name="ArgumentException_The_country_code_0_is_not_registered" xml:space="preserve">
        <value>The country code '{0}' is not registered.</value>
    </data>
    <data name="Exception_Builder_The_BBAN_cannot_be_built" xml:space="preserve">
        <value>The BBAN cannot be built.</value>
    </data>
    <data name="Exception_Builder_The_IBAN_cannot_be_built" xml:space="preserve">
        <value>The IBAN cannot be built.</value>
    </data>
    <data name="Exception_Builder_A_value_for_0_is_not_supported_for_country_code_1" xml:space="preserve">
        <value>A value for '{0}' is not supported for country code {1}.</value>
    </data>
    <data name="Exception_Builder_The_value_0_does_not_have_the_correct_length_of_1" xml:space="preserve">
        <value>The value '{0}' does not have the correct length of {1}.</value>
    </data>
    <data name="Exception_Builder_The_country_is_required" xml:space="preserve">
        <value>The country is required.</value>
    </data>
    <data name="The_value_cannot_be_less_than_0" xml:space="preserve">
        <value>The value cannot be less than {0}.</value>
    </data>
    <data name="The_value_cannot_be_less_than_or_equal_to_0" xml:space="preserve">
        <value>The value cannot be less than or equal to {0}.</value>
    </data>
    <data name="Enum_value_0_should_be_defined_in_the_1_enum" xml:space="preserve">
        <value>Enum value '{0}' should be defined in the '{1}' enum.</value>
    </data>
    <data name="Exception_The_country_0_does_not_define_a_BBAN_pattern" xml:space="preserve">
        <value>The country '{0}' does not define a BBAN pattern.</value>
    </data>
    <data name="Exception_The_country_0_does_not_define_a_IBAN_pattern" xml:space="preserve">
        <value>The country '{0}' does not define a IBAN pattern.</value>
    </data>
    <data name="CountryNotAcceptedResult_Bank_account_numbers_from_country_0_are_not_accepted" xml:space="preserve">
        <value>Bank account numbers from country {0} are not accepted.</value>
    </data>
    <data name="ArgumentException_At_least_one_country_code_must_be_provided" xml:space="preserve">
        <value>At least one country code must be provided.</value>
    </data>
</root>
