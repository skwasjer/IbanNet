<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="System.Text.Json" #>
<#@ assembly name="System.Text.RegularExpressions" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)\src\IbanNet.CodeGen\bin\$(Configuration)\netstandard2.0\IbanNet.CodeGen.dll" #>
<#@ assembly name="$(SolutionDir)\src\IbanNet\bin\$(Configuration)\netstandard2.0\IbanNet.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text.Json" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ import namespace="IbanNet.CodeGen.Wikipedia" #>
using System.CodeDom.Compiler;
using System.Collections;
using System.Diagnostics;

namespace IbanNet.Registry.Wikipedia;

<#
    // Generate provider from Wikipedia.

    var wikiResponse = Loader.GetWikiData();
#>
/// <summary>
/// This IBAN registry provider is derived from Wikipedia.
/// </summary>
/// <remarks>
/// <para>Note: this provider does not conform to the official spec, and is provided as an add-on. Use at your own risk.</para>
/// <para>
/// Generated from: https://en.wikipedia.org/wiki/International_Bank_Account_Number
/// Page ID: <#= wikiResponse.Parse.PageId #>
/// Rev ID: <#= wikiResponse.Parse.RevId #>
/// </para>
/// </remarks>
[GeneratedCode("WikiRegistryProviderT4", "1.<#= wikiResponse.Parse.PageId #>-<#= wikiResponse.Parse.RevId #>")]
public class WikipediaRegistryProvider : IIbanRegistryProvider
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private ICollection<IbanCountry>? _countries;

    /// <inheritdoc />
    public IEnumerator<IbanCountry> GetEnumerator()
    {
        _countries = _countries ??= Load().ToList();

        return _countries.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc />
    // ReSharper disable once UseCollectionCountProperty - justification: need to init _countries first.
    public int Count => _countries?.Count ?? this.Count();

    private static IEnumerable<IbanCountry> Load()
    {
        // ReSharper disable CommentTypo
        // ReSharper disable StringLiteralTypo
<#
            var wikiSpecs = wikiResponse.Records
                .Where(x => !Boycott(x.CountryCode))
                .OrderBy(x => x.CountryCode)
                .ToList();

            foreach (var x in wikiSpecs)
            {
#>
        yield return new IbanCountry("<#= x.CountryCode #>")
        {
            NativeName = "<#= x.NativeName ?? x.EnglishName #>",
            EnglishName = "<#= x.EnglishName #>",
            Iban = new IbanStructure(new IbanWikipediaPattern("<#= x.CountryCode #>", "<#= x.Pattern #>")),
            Bban = new BbanStructure(new WikipediaPattern("<#= x.Pattern #>"), 4)
        };

<#
            }
#>
        // ReSharper restore StringLiteralTypo
        // ReSharper restore CommentTypo
    }
}
<#+
private static bool Boycott(string countryCode)
{
    return countryCode == "RU"; // Go Ukraine!
}
#>
