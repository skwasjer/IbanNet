<#@ template hostspecific="true" language="C#" visibility="internal" debug="true" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\src\IbanNet.CodeGen\bin\$(Configuration)\netstandard2.0\IbanNet.CodeGen.dll" #>
<#@ assembly name="$(SolutionDir)\src\IbanNet.CodeGen\bin\$(Configuration)\netstandard2.0\CsvHelper.dll" #>
<#@ assembly name="$(SolutionDir)\src\IbanNet\bin\$(Configuration)\netstandard2.0\IbanNet.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="IbanNet.CodeGen.Swift" #>
<#@ import namespace="IbanNet.Registry.Swift" #>
<#@ output extension=".cs" #>
using System.CodeDom.Compiler;
using System.Collections;
using System.Diagnostics;
using IbanNet.Registry.Patterns;
<#
    string dataFolder = Path.Combine(Path.GetDirectoryName(this.Host.ResolvePath("SwiftRegistryProvider.tt")), "Files");
    string registryPath = Directory.GetFiles(dataFolder)
        .Where(s => s.EndsWith(".txt"))
        .OrderBy(s => s)
        .Last();
    string registryFile = Path.GetFileName(registryPath);
    string registryReleaseVersion = registryFile.Split('.')[1];
#>

namespace IbanNet.Registry.Swift;

/// <summary>
/// This IBAN registry provider contains IBAN/BBAN/SEPA information for all known IBAN countries.
/// </summary>
/// <remarks>
/// Generated from: <#= registryFile #>
/// </remarks>
[GeneratedCode("SwiftRegistryProviderT4", "1.1-<#= registryReleaseVersion #>")]
public class SwiftRegistryProvider : IIbanRegistryProvider
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private ICollection<IbanCountry>? _countries;

    /// <inheritdoc />
    public IEnumerator<IbanCountry> GetEnumerator()
    {
        _countries = _countries ??= Load().ToList();

        return _countries.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc />
    // ReSharper disable once UseCollectionCountProperty - justification: need to init _countries first.
    public int Count => _countries?.Count ?? this.Count();

    private static IEnumerable<IbanCountry> Load()
    {
        // ReSharper disable CommentTypo
        // ReSharper disable StringLiteralTypo

<#
    var csv = new SwiftCsvReader(new StreamReader(registryPath, Encoding.GetEncoding(1252)));
    var records = csv.GetRecords<SwiftCsvRecord>();

    foreach (var record in records.Select(IbanNet.CodeGen.Swift.Patches.RecordPatcher.ApplyAll))
    {
        int bbanOffset = record.Iban.Length - record.Bban.Length;
        if (Boycott(record.CountryCode)) continue;
#>
        // <#= record.EnglishName #>
        yield return new IbanCountry("<#= record.CountryCode #>")
        {
            NativeName = "<#= record.NativeName #>",
            EnglishName = "<#= record.EnglishName #>",
<#
        if (record.OtherTerritories.Count > 0) {
#>
            IncludedCountries = new[]
            {
                    <#
                    WriteLine(string.Join(", ", record.OtherTerritories.Select(r => $"\"{r.Substring(0, 2).ToUpperInvariant()}\"")));
#>
            },
<#
        }

#>
            Iban = new IbanStructure(new SwiftPattern(new PatternToken[]
            {
<#
        var pattern = new SwiftPattern(record.Iban.Pattern);
#>
                new("<#= record.CountryCode #>"),
<#
        foreach (var token in pattern.Tokens.Skip(2))
        {
#>
                new(AsciiCategory.<#= token.Category #>, <#= token.MinLength #>, <#= token.MaxLength #>),
<#
        }
#>
            }))
            {
                Example = "<#= record.Iban.ElectronicFormatExample ?? string.Empty #>",
                EffectiveDate = new DateTimeOffset(<#= record.EffectiveDate.Year #>, <#= record.EffectiveDate.Month #>, 1, 0, 0, 0, TimeSpan.Zero)
            },
            Bban = new BbanStructure(new SwiftPattern("<#= record.Bban.Pattern #>"), <#= bbanOffset #>)
            {
                Example = "<#= record.Bban.Example ?? string.Empty #>"
            },
<#
        if (record.Bank.Pattern is not null && record.Bank.Position.HasValue) {
#>
            Bank = new BankStructure(new SwiftPattern("<#= record.Bank.Pattern #>"), <#= bbanOffset + record.Bank.Position.Value.StartPos - 1 #>)
            {
                Example = "<#= record.Bank.Example ?? string.Empty #>"
            },
<#
        }

        if (record.Branch.Pattern is not null && record.Branch.Position.HasValue) {
#>
            Branch = new BranchStructure(new SwiftPattern("<#= record.Branch.Pattern #>"), <#= bbanOffset + record.Branch.Position.Value.StartPos - 1 #>)
            {
                Example = "<#= record.Branch.Example ?? string.Empty #>"
            },
<#
        }
#>
            Sepa = new SepaInfo
            {
                IsMember = <#= record.Sepa.IsMember.ToString().ToLowerInvariant() + (record.Sepa.OtherTerritories.Count > 0 ? "," : "") #>
<#
        if (record.Sepa.OtherTerritories.Count > 0) {
#>
                IncludedCountries = new[]
                {
                        <#
                        WriteLine(string.Join(", ", record.Sepa.OtherTerritories.Select(r => $"\"{r.Substring(0, 2).ToUpperInvariant()}\"")));
#>
                }
<#
        }
#>
            },
            DomesticAccountNumberExample = "<#= record.DomesticExample ?? string.Empty #>",
            LastUpdatedDate = new DateTimeOffset(<#= record.LastUpdatedDate.Year #>, <#= record.LastUpdatedDate.Month #>, 1, 0, 0, 0, TimeSpan.Zero)
        };

<#
    }
#>
        // ReSharper restore StringLiteralTypo
        // ReSharper restore CommentTypo
    }
}
<#+
private static bool Boycott(string countryCode)
{
    return countryCode == "RU"; // Go Ukraine!
}
#>
